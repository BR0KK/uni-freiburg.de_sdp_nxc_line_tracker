/*
*
*SDP_UNI_FREIBURG_NXC_LINE_FOLLOWING_BOT
*Group:                                 10
*Author:                                Hanno Haßelkuß (BR0KK), Martin Tetzlaf, Sinan Ötzmen, Stefan Schwaer
*Matrikel:                              3525991,
*GITHUB:                                https://github.com/BR0KK/uni-freiburg.de_sdp_nxc_line_tracker
*License:                               NXC belongs to Lego..... My code to me. Copy if you like :)
*
*/
//___________________________________________________________________________________________________________
//___________________________________________________________________________________________________________
//
/*
*Author:
*Define Thresholds here:
*/
//Set threshhold for black
#define sOnBlack 40

//Set threshhold for white
#define sOnWhite 60

//Set threshold middleSafeOnBlack 1
#define middleSafeOnBlack 1

//Set threshold leftSafeOnWhite 1
#define leftSafeOnWhite 1

//Set threshold rightSafeOnWhite 1
#define rightSafeOnWhite 1

//Set forward / backward speed limit
#define speed1 50

//Set turnSpeed limit
#define turnSpeed 80

//Set waitTime (Main use in function "turnRight / left ()")
#define waitTime 1000

/*
*Author:
*Initialize all sensors
*Return: no "return" value
*/
void initSensors () {

     //SET Lightsensor on port (IN_1). Left sensor
     SetSensorLight (IN_1);

     //SET Color Sensor on port (IN_2). Middle sensor
     SetSensorLight (IN_2);

     //SET Lightsensor on port (IN_4). Right sensor
     SetSensorLight (IN_4);

}//endFuncInit

/*
*Author:
*Machines to full stop
*Return: no "return" value
*/
void fullStop () {

     //Full stop of both motors (OUT_AC)
     Off(OUT_AC);

}//endFuncFullStop

/*
*Author:
*Move robot forward with synced Motots (OUT_AC)
*It's reversed because the robot build that way!
*Return: no "return" value
*/
void moveForward () {

     //Forward movement with automated sync of motors
     OnRevReg(OUT_AC, speed1, OUT_REGMODE_SPEED);

}//endFuncMoveForward ()

/*
*Author:
*Move robot backwards with synced Motots (OUT_AC)
*It's reversed bcause the robot build that way!
*Return: no "return" value
*/
void moveBackwards () {

     //Backward movement with automated sync of motors
     OnFwdReg(OUT_AC, speed1, OUT_REGMODE_SPEED);

}//endFuncMoveBackwards()

/*
*Author:
*Turn left ....
*Does not work atm. If i use this in function "driveLogic ()" the Robot wont turn
*Return: no "return" valu
*/
void turnLeft () {

     //Left motor moves forward @ "turnSpeed" %.
     OnRev (OUT_C, turnSpeed);
     
     //Do That for "waitTime" seconds (See "#define...." ant the top of the program)
     Wait (waitTime);
     
}//endFuncTurnLeft

/*
*Author:
*Turn rght ....
*Does not work atm. If i use this in function "driveLogic ()" the Robot wont turn
*Return: no "return" value
*/
void turnRight () {

     //Stop all motors (See function "fullStop ()" for details).
     fullStop ();
     //Left motor moves forward @ "turnSpeed" %.
     OnRev (OUT_A, turnSpeed);

     //Do That for "waitTime" seconds (See "#define...." ant the top of the program)
     Wait (waitTime);

}//endFuncTurnRight

/*
*Author:
*Display all the Sesnsor values at the main display of the NXC BRIX
*Makes it easier to debug in live mode :)
*Return: no "return" value
*/
void displaySensors () {

//Allocate STRING values to print them on the Display.... It's esier to change them here
string sLeft = "_L_";
string sRight = "_R_";
string sMiddle = "_M_";

//Allocate INTEGER values and set them to values of the associated Sensors. It's easier to change them here
int lValue = Sensor (IN_1);
int mValue = Sensor (IN_2);
int rValue = Sensor (IN_4);

       //Display STRING "sLeft" for left sensor (IN_1) on LCD_LINE1
       TextOut (0, LCD_LINE1, sLeft);
       
       //Display INTEGER "lValue" of left sensor (IN_1) on LCD_LINE2
       NumOut (0, LCD_LINE2, lValue);
       
       //Display STRING "sMiddle" for middle sensor (IN_2) on LCD_LINE1
       TextOut (40, LCD_LINE1, sMiddle);

       //Display INTEGER "mValue" for middle sensor (IN_1) on LCD_LINE2
       NumOut (40, LCD_LINE2, mValue);

       //Display STRING "sRight" for right sensor (IN_4) on LCD_LINE1
       TextOut (80, LCD_LINE1, sRight);
       
       //Display INTEGER "rValue " for left sensor (IN_1) on LCD_LINE2
       NumOut (80, LCD_LINE2, rValue);

}//endFuncDisplaySensors

/*
*Author:
*All driving magic goes here.....
*Main part of this function should be calling the necessary function to drive the robot...
*Atm its dooing all the sensor and driving logic. Should be seperated in different functions some day ...
*Maybe a threated program .... IDK
*One major Problem with that code is, when the black line is not exaclty 90° at a turning point. The Robot tends to
*drive over it and keeps faling over the edge. Suicidal robot 0_o...
*Goals:
*- Seperate functions for sensor and driving
*- Edge detection.... -> To Stop the Robot after loosing the balck line
*- Finding the balck line again... Stop --> move backwards -> Turn to dirrection..... etc
*Return: no "return" value
*/
void driveLogic () {

     //Looped forever....
     do {
     
     //Print out Sensor values collected by function "displaySensors ()"
     displaySensors ();
     
        //As long as Sensor (IN_1) AND (&&) Sensor (IN_4) are on White......
        if ( Sensor (IN_1) && Sensor (IN_4) >= sOnWhite) {

        //Drive forward... (See function "moveForward ()" for details)
        moveForward ();

        }//endIf1
        
        //If Sensor (IN_1) detects a value <= sOnBlack than....
        if (Sensor (IN_1) <= sOnBlack ) {

           //Stop the Machine (See function "fullStop ()" for details)
           fullStop ();

           //Start right motor @ "turnSpeed" value (For details go to "#define...." at the top of the program)
           OnRev (OUT_C, turnSpeed);

        }//endIf2

        if (Sensor (IN_4) <= sOnBlack ) {

           //Stop the Machine (See function "fullStop ()" for details)
           fullStop ();

           //Start left motor @ "turnSpeed" value (For details go to "#define...." at the top of the program)
           OnRev (OUT_A, turnSpeed);

        }//endIf3

     } while (true)//endDoWhile1

}//endFuncDriveLogic

/*
*Author:
*Main task. Only fuction calling here!....
*Return: no "return" value
*/
task main () {

     //Innitialise all sensors (See function "initSensors ()" for details)
     initSensors ();
     
     //Start the robot action (See function "driveLogic ()" for details)
     //driveLogic ();
     
}//endMain

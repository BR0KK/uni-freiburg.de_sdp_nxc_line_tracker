/*
*SDP_UNI_FREIBURG_NXC_LINE_FOLLOWING_BOT
*Group:                                 10
*Author:                                Hanno Haßelkuß (BR0KK), Martin Tetzlaf, Sinan Ötzmen, Stefan Schwaer
*Matrikel:                              3525991,
*GITHUB:                                https://github.com/BR0KK/uni-freiburg.de_sdp_nxc_line_tracker
*License:                               NXC belongs to Lego..... My code to me. Copy if you like :)
*
*/
//___________________________________________________________________________________________________________
//___________________________________________________________________________________________________________
//

/*
*Author:
*Define Thresholds here:
*/
//Set threshhold for black
#define sOnBlack 40

//Set threshhold for white
#define sOnWhite 60

//Set robotSafeoOnTable is returned by initSensors if all sensors are on their color.
#define robotSafeOnTable 0

//Set robotNotSafeOnTable is returned by initSensors if all sensors are on their color.
#define robotNotSafeOnTable 1

//Set forward / backward speed limit
#define speed1 50

//Set turnSpeed limit
#define turnSpeed 80

//Set mutex moveMotors for exclusive access to the motors at port (OUT_A; OUT_C)
mutex moveMotors;

/*
*Author:
*Initialize all sensors
*Return: robotSafeOnTable, robotNotSafeOnTable
*/
int initSensors () {

     //SET Lightsensor on port (IN_1). Left sensor
     SetSensorLight (IN_1);

     //SET Color Sensor on port (IN_2). Middle sensor
     SetSensorLight (IN_2);

     //SET Lightsensor on port (IN_4). Right sensor
     SetSensorLight (IN_4);
     
     if (Sensor (IN_1) && Sensor (IN_4) >= sOnWhite && Sensor (IN_2) <= sOnBlack) {

        //Return value of "robotSafeOnTable" (See #define .... at the top of the program)
        return robotSafeOnTable;

     }//endIf1
     else {

        //Return value of "robotNotSafeOnTable" (See #define .... at the top of the program)
        return robotNotSafeOnTable;
          
     }//endIf1Else1

}//endFuncInit ()

/*
*Author:
*Display all the Sesnsor values at the main display of the NXC BRIX
*Makes it easier to debug in live mode :)
*Return: no "return" value
*/
void displaySensors () {

//Allocate STRING values to print them on the Display.... It's esier to change them here
string sLeft = "_L_";
string sRight = "_R_";
string sMiddle = "_M_";

//Allocate INTEGER values and set them to values of the associated Sensors. It's easier to change them here
int lValue = Sensor (IN_1);
int mValue = Sensor (IN_2);
int rValue = Sensor (IN_4);

//Allocate INTEGER values for the "y" position on the NXC BRIX display. Its easier to change them here
int lY = 0;
int mY = 40;
int rY = 80;


       //Display STRING "sLeft" for left sensor (IN_1) on LCD_LINE1
       TextOut (lY, LCD_LINE1, sLeft);

       //Display INTEGER "lValue" of left sensor (IN_1) on LCD_LINE2
       NumOut (lY, LCD_LINE2, lValue);

       //Display STRING "sMiddle" for middle sensor (IN_2) on LCD_LINE1
       TextOut (mY, LCD_LINE1, sMiddle);

       //Display INTEGER "mValue" for middle sensor (IN_1) on LCD_LINE2
       NumOut (mY, LCD_LINE2, mValue);

       //Display STRING "sRight" for right sensor (IN_4) on LCD_LINE1
       TextOut (rY, LCD_LINE1, sRight);

       //Display INTEGER "rValue " for left sensor (IN_1) on LCD_LINE2
       NumOut (rY, LCD_LINE2, rValue);

}//endFuncDisplaySensors ()

/*
*Author:
*Both motors to full stop
*Return: no "return" value
*/
void fullStop () {

     //Acquire exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore
     Acquire (moveMotors);
     
     //Full stop of both motors (OUT_AC)
     Off(OUT_AC);
     
     //Release exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore
     Release (moveMotors);

}//endFuncFullStop ()

/*
*Author:
*Move robot forward with synced Motots (OUT_AC)
*It's reversed because the robot build that way!
*Return: no "return" value
*/
void moveForward (int spd) {

     //Acquire exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
     Acquire (moveMotors);

     //Forward movement with automated sync of motors. Value of "spd" will be given throu calling that procedure with an INTEGER argument.
     OnRevReg(OUT_AC, spd, OUT_REGMODE_SPEED);
     
     //Release exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
     Release (moveMotors);

}//endFuncMoveForward ()

/*
*Author:
*Move robot backwards with synced Motots (OUT_AC)
*It's reversed bcause the robot build that way!
*Return: no "return" value
*/
void moveBackwards (int spd) {

     //Acquire exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
     Acquire (moveMotors);

     //Forward movement with automated sync of motors. Value of "spd" will be given throu calling that procedure with an INTEGER argument.
     OnFwdReg(OUT_AC, spd, OUT_REGMODE_SPEED);

     //Release exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
     Release (moveMotors);

}//endFuncMoveBackwards ()

/*
*Author:
*Turn left ....
*Does not work atm. If i use this in task "checkSensors ()" the Robot won't turn
*Return: no "return" value
*/
void turnLeft (int trnspd) {

     //Stop both motors imedeately (See procedure "fullStop ()" for details)
     fullStop ();

     //Acquire exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
     Acquire (moveMotors);

     //Left motor (OUT_C)  moves forward @ "trnspd" %. Value of "trnspd" will be given throu calling that procedure with an INTEGER argument.
     OnRev (OUT_C, trnspd);

     //Release exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
     Release (moveMotors);

}//endFuncTurnLeft ()

/*
*Author:
*Turn rght ....
*Does not work atm. If i use this in task "checkSensors ()" the Robot won't turn
*Return: no "return" value
*/
void turnRight (int trnspd) {

     //Stop both motors imedeately (See procedure "fullStop ()" for details)
     fullStop ();

     //Acquire exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
     Acquire (moveMotors);

     //Left motor (OUT_A) moves forward @ "trnspd" %. Value of "trnspd" will be given throu calling that procedure with an INTEGER argument.
     OnRev (OUT_A, trnspd);

     //Release exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
     Release (moveMotors);

}//endFuncTurnRight ()

/*
*Author:
*This task should, when its ready drive the robot forward
*Return: no "return" value
*/
task moveRobotForward () {

     //Looped forever....
     do {
     
        //Print out Sensor values collected by procedure "displaySensors ()"
        displaySensors ();

        //Drive forward... (See procedure "moveForward ()" for details)
        moveForward (speed1);

     }while (true)//endDoWhile1

}//endTaskMoveRobotForward ()

/*
*Author:
*This task should, when its ready steer the robot to get back to the black
*Line
*Return: no "return" value
*/
task checkSensors () {

     //Looped forever....
     do {

        //As long as Sensor (IN_1) AND (&&) Sensor (IN_4) are on White......
        if ( Sensor (IN_1) && Sensor (IN_4) >= sOnWhite) {

           //Drive forward with value "int spd = speed1"... (See procedure "moveForward (int spd)" for details)
           moveForward (speed1);

        }//endIf1

        //If Sensor (IN_1) detects a value <= sOnBlack than....
        if (Sensor (IN_1) <= sOnBlack ) {
        
           //Calling procedure "turnLeft (int trnspd)" with value "int trnspd = turnSpeed)" (See procedure "turnLeft (int trnspd)" for details)
           //This will replace the code under it when it works!
           //turnLeft (turnspeed);

           //Stop both motors imedeately (See procedure "fullStop ()" for details)
           fullStop ();

           //Acquire exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
           Acquire (moveMotors);

           //Start right motor @ "turnSpeed" value (For details go to "#define...." at the top of the program)
           OnRev (OUT_C, turnSpeed);
           
           //Release exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
           Release (moveMotors);
           
        }//endIf2

        if (Sensor (IN_4) <= sOnBlack ) {
        
           //Calling procedure "turnRight (int trnspd)" with value "int trnspd = turnSpeed)" (See procedure "turnRight (int trnspd)" for details)
           //This will replace the code under it when it works!
           //turnRight (turnspeed);

           //Stop both motors imedeately (See procedure "fullStop ()" for details)
           fullStop ();
           
           //Acquire exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
           Acquire (moveMotors);

           //Start left motor @ "turnSpeed" value (For details go to "#define...." at the top of the program)
           OnRev (OUT_A, turnSpeed);
           
           //Release exclusive access to motors (OUT_A; OUT_C) through "mutex" seamphore (See "mutex" deffinition at top of the program)
           Release (moveMotors);
           
        }//endIf3

     }while (true)//endDoWhile1

}//endTaskCheckSensors ()

/*
* Author:
*Only function or task calling here... no actual program code!
*Return: no "return" value
*/
task main () {

     //Innitialise all sensors (See function "initSensors ()" for details). Returns: robotSafeOnTable or robotNotSafeOnTable
     initSensors ();
     
     //Purpose of the main class is to call the tasks "moveRobot" and "checkSensors"
     Precedes (moveRobotForward, checkSensors);
     
}//endTaskMain ()

/*
*SDP_UNI_FREIBURG_NXC_LINE_FOLLOWING_BOT
*Group:                                 10
*Author:                                Hanno Haßelkuß (BR0KK), Martin Tetzlaf, Sinan Ötzmen, Stefan Schwaer
*Matrikel:                              3525991,
*GITHUB:                                https://github.com/BR0KK/uni-freiburg.de_sdp_nxc_line_tracker
*License:                               NXC belongs to Lego..... My code to me. Copy if you like :)
*
*/
//___________________________________________________________________________________________________________
//___________________________________________________________________________________________________________
//
/*
*Author:
*Define Thresholds here:
*/
//Set threshhold for black
#define sOnBlack 40

//Set threshhold for white
#define sOnWhite 60

//Set robotSafeoOnTable. Is returned by initSensors if all sensors are on their color.
#define robotSafeOnTable 0

//Set robotNotSafeOnTable. Is returned by initSensors if all sensors are on their color.
#define robotNotSafeOnTable 1

//Set forward / backward speed limit
#define speed1 50

//Set turnSpeed limit
#define turnSpeed 90

/*
*Author:
*Initialize all sensors
*Return: robotSafeOnTable, robotNotSafeOnTable
*/
int initSensors () {

     //SET Lightsensor on port (IN_1). Left sensor
     SetSensorLight (IN_1);

     //SET Color Sensor on port (IN_2). Middle sensor
     SetSensorLight (IN_2);

     //SET Lightsensor on port (IN_4). Right sensor
     SetSensorLight (IN_4);
     
     //If sensor (IN_1, IN_4) detect a value >= sOnWhite and sensor (IN_3) detects a value <= sOnBlack then....
     if (Sensor (IN_1) && Sensor (IN_4) >= sOnWhite && Sensor (IN_2) <= sOnBlack) {

        //Return value of "robotSafeOnTable" (See #define .... at the top of the program)
        return robotSafeOnTable;

     }//endIf1
     else {

        //Return value of "robotNotSafeOnTable" (See #define .... at the top of the program)
        return robotNotSafeOnTable;

     }//endIf1Else1

}//endFuncInit ()

/*
*Author:
*Machines to full stop
*Return: no "return" value
*/
void fullStop () {

     //Full stop of both motors (OUT_AC)
     Off(OUT_AC);

}//endFuncFullStop ()

/*
*Author:
*Move robot forward with synced Motots (OUT_AC)
*It's reversed because the robot build that way!
*Return: no "return" value
*/
void moveForward (int spd) {

     //Forward movement with automated sync of motors. Value of "spd" will be given throu calling that procedure with an INTEGER argument.
     OnRevReg(OUT_AC, spd, OUT_REGMODE_SPEED);

}//endFuncMoveForward ()

/*
*Author:
*Move robot backwards with synced Motots (OUT_AC)
*It's reversed bcause the robot build that way!
*Return: no "return" value
*/
void moveBackwards (int spd) {

     //Backward movement with automated sync of motors. Value of "spd" will be given throu calling that procedure with an INTEGER argument.
     OnFwdReg(OUT_AC, spd, OUT_REGMODE_SPEED);

}//endFuncMoveBackwards()

/*
*Author:
*Turn left ....
*Return: no "return" value
*/
void turnLeft (int trnSpd) {

     //Stop all motors (See function "fullStop ()" for details).
     fullStop ();

     //Left motor (OUT_C) moves forward @ "trnSpd" %.  Value of "trnspd" will be given throu calling that procedure with an INTEGER argument.
     OnRev (OUT_C, trnSpd);
     OnFwd (OUT_A, 10);

}//endFuncTurnLeft ()

/*
*Author:
*Turn rght ....
*Return: no "return" value
*/
void turnRight (int trnSpd) {

     //Stop all motors (See function "fullStop ()" for details).
     fullStop ();

     //Right motor (OUT_A) moves forward @ "trnSpd" %. Value of "trnspd" will be given throu calling that procedure with an INTEGER argument.
     OnRev (OUT_A, trnSpd);
     OnFwd (OUT_C, 10);

}//endFuncTurnRight ()

/*
*Author:
*Display all the Sesnsor values at the main display of the NXC BRIX
*Makes it easier to debug in live mode :)
*Return: no "return" value
*/
void displaySensors () {

//Allocating a STRING value for the pintout
string single = "Single tasked";

       //Display text containing string value on NXC BRIX display.
       TextOut (0, LCD_LINE4, single);

//Allocate STRING values to print them on the Display.... It's esier to change them here
string sLeft = "_L_";
string sRight = "_R_";
string sMiddle = "_M_";

//Allocate INTEGER values and set them to values of the associated Sensors. It's easier to change them here
int lValue = Sensor (IN_1);
int mValue = Sensor (IN_2);
int rValue = Sensor (IN_4);

//Allocate INTEGER values for the "y" position on the NXC BRIX display. Its easier to change them here
int lY = 0;
int mY = 40;
int rY = 80;


       //Display STRING "sLeft" for left sensor (IN_1) on LCD_LINE1
       TextOut (lY, LCD_LINE1, sLeft);

       //Display INTEGER "lValue" of left sensor (IN_1) on LCD_LINE2
       NumOut (lY, LCD_LINE2, lValue);

       //Display STRING "sMiddle" for middle sensor (IN_2) on LCD_LINE1
       TextOut (mY, LCD_LINE1, sMiddle);

       //Display INTEGER "mValue" for middle sensor (IN_1) on LCD_LINE2
       NumOut (mY, LCD_LINE2, mValue);

       //Display STRING "sRight" for right sensor (IN_4) on LCD_LINE1
       TextOut (rY, LCD_LINE1, sRight);

       //Display INTEGER "rValue " for left sensor (IN_1) on LCD_LINE2
       NumOut (rY, LCD_LINE2, rValue);

}//endFuncDisplaySensors ()

/*
*Author:
*All driving magic goes here.....
*Main part of this function should be calling the necessary function to drive the robot...
*Atm its dooing all the sensor and driving logic. Should be seperated in different functions some day ...
*Maybe a threated program .... IDK
*One major Problem with that code is, when the black line is not exaclty 90° at a turning point. The Robot tends to
*drive over it and keeps faling over the edge. Suicidal robot 0_o...
*Goals:
*- Seperate functions for sensor and driving
*- Edge detection.... -> To Stop the Robot after loosing the balck line
*- Finding the balck line again... Stop --> move backwards -> Turn to dirrection..... etc
*Return: no "return" value
*/
void driveLogic () {

     //Looped forever....
     do {

     //Print out Sensor values collected by function "displaySensors ()"
     displaySensors ();

        //As long as Sensor (IN_1) AND (&&) Sensor (IN_4) are on White......
        if ( Sensor (IN_1) && Sensor (IN_4) >= sOnWhite ) {

        //Drive forward... (See function "moveForward ()" for details)
        moveForward (speed1);

        }//endIf1

        //If sensor (IN_1) detects a value <= sOnBlack then....
        if (Sensor (IN_1) <= sOnBlack ) {

           //Calling procedure "turnLeft (int trnSpd)" with value "int trnspd = turnSpeed)" (See procedure "turnLeft (int trnSpd)" for details)
           turnLeft (turnSpeed);

        }//endIf2
        
        //If sensor (IN_4) detects a value <= sOnBlack then....
        if (Sensor (IN_4) <= sOnBlack ) {

           //Calling procedure "turnRight (int trnSpd)" with value "int trnspd = turnSpeed)" (See procedure "turnRight (int trnSpd)" for details)
           turnRight (turnSpeed);

        }//endIf3
        
        /*
        * This part should use the middle sensor (IN_2) to prevent the robot from escaping the black line...
        *ATM this part only stops the robot; by calling the procedure fullStop (); if the middle sensor (IN_2) detects a value <= sOnBlack
        */
        //If sensor (IN_2) detects a value >= sOnWhite then....
        if (Sensor (IN_2) >= sOnWhite ) {

           //ATM the Machine stops working....
           fullStop ();

        }//endIf4

     } while (true)//endDoWhile1

}//endFuncDriveLogic ()

/*
*Author:
*Main task. Only fuction calling here!....
*Return: no "return" value
*/
task main () {

     //Innitialise all sensors (See function "initSensors ()" for details)
     initSensors ();

     //Start the robot action (See function "driveLogic ()" for details)
     driveLogic ();

}//endTaskMain ()


